# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:

# using app service
# - stage: provision
#   displayName: 'Terraforming on Azure'
#   jobs:
#   - job: provision
#     displayName: 'Provision infrastructure'
#     pool:
#       vmImage: ubuntu-latest
#     variables:
#     - group: Terraform
#     steps:
#     - script: |
#         set -e

#         cd infrastructure
#         terraform init -input=false
#         terraform apply -input=false -auto-approve
#       name: 'RunTerraform'
#       displayName: 'Run Terraform'
#       env:
#         ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#         ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#         ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#         ARM_TENANT_ID: $(ARM_TENANT_ID)
#         TF_VAR_imagebuild: $(tag)

# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: BuildJob
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
#       - task: NodeTool@0
#         inputs:
#           versionSpec: '14.x'
#         displayName: 'Install Node.js'
#       - script: |
#           cd '$(System.DefaultWorkingDirectory)'
#           npm install -g @angular/cli
#           npm install
#           ng build --prod
#         displayName: 'npm install and build'
#       - task: ArchiveFiles@2
#         displayName: 'Archive files'
#         inputs:
#           rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Chat-frontend/'
#           includeRootFolder: false
#           archiveType: zip
#           archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#           replaceExistingArchive: true

#       - task: PublishBuildArtifacts@1
#         inputs:
#           PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
#           ArtifactName: 'drop'
#           publishLocation: 'Container'
# - stage: Deploy
#   displayName: 'Deploy Web App'
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: DeploymentJob
#     pool:
#       vmImage: 'ubuntu-latest'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: 'Vagachat ARM front2'
#               appName: webchatfront-dev-appservice
#               appType: webAppLinux
#               package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip 


- stage: build
  displayName: 'Build'
  #dependsOn: provision
  jobs:
  - job: build_test
    displayName: 'Build'
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'
    - script: |
        npm install -g @angular/cli
        npm install
        ng build --prod
      displayName: 'npm install, build'
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist/web-chat-app/'
        replaceExistingArchive: true
        includeRootFolder: false
    - task: PublishPipelineArtifact@0
      displayName: 'Publish artifact'
      inputs:
        targetPath: '$(System.ArtifactsDirectory)'

- stage: deploy
  displayName: 'Deploy'
  dependsOn: build
  jobs:
  - deployment: deploy
    displayName: 'Deploy'
    environment: dev
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            displayName: 'Download artifact'
            inputs:
              downloadPath: '$(System.DefaultWorkingDirectory)'
          # - task: AzureWebApp@1
          #   inputs:
          #     azureSubscription: 'Vagachat ARM front'
          #     appType: 'webAppLinux'
          #     appName: 'webchatfront-dev-appservice'
          #     runtimeStack: 'NODE|14-lts'
          #     startUpCommand: 'npm run start'
          - task: AzureRmWebAppDeployment@4
            displayName: 'Push to Azure'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Vagachat ARM front2'
              appType: 'webAppLinux'
              WebAppName: 'webchatfront-dev-appservice'
              packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
              RuntimeStack: 'NODE|14-lts'
              StartupCommand: 'npm run start'
